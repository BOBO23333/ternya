[default]

# absolute path of your project root directory.
project_abspath = E:\ternya

# package name where you put your process method that deal with openstack notification
# ternya will scan all python files under the package you point. multiple package can join with ';'
# so where is your process method, then set packages_scan to that.
# for example. assume your project struct like below:

# E:\ternya
# |-- my_process_one.py
# `-- process
#    |-- my_process_two.py
#    `-- sub_process
#        |-- my_process_three.py
# `-- process1
#    |-- my_process_four.py

# 1. packages_scan =
#    in this way, ternya will scan all python files under project root directory. this is not recommended
# 2. packages_scan = process
#    in this way, ternya will scan my_process_two.py and my_process_threee.py
# 3. packages_scan = process.sub_process
#    in this way, ternya will scan my_process_three.py
# 4. packages_scan = process.sub_process;process1
#    in this way, ternya will scan my_process_three.py and my_process_four.py

# you need to set this to include all your process method that deal with openstack notification
# but scanning less packages is better.
packages_scan = test

# openstack mq username
mq_user = rabbitclient

# openstack mq password
mq_password = FKzBIhYDXtGRGjdO

# openstack mq host
mq_host = 10.20.0.125:5672


[nova]
# whether to listen nova notification.
listen_notification = true

# how much consumer to connect one queue.
mq_consumer_count = 1

[cinder]
# whether to listen cinder notification.
listen_notification = true

# how much consumer to connect one queue.
mq_consumer_count = 1

[neutron]
# whether to listen neutron notification.
listen_notification = true

# how much consumer to connect one queue.
mq_consumer_count = 1

[glance]
# whether to listen glance notification.
listen_notification = true

# how much consumer to connect one queue.
mq_consumer_count = 1